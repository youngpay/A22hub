@{
    ViewBag.Title = "文件管理";
    ViewBag.Menu = 1;
}
@section css
{
    <style>
        li.firstDir {
            margin-left: initial;
        }

        .inlinenobreak {
            width: 100%;
            white-space: nowrap;
            display: inline-block;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .uploadpanel {
            margin-bottom: 30px;
        }

        .uploadarea {
            border-style: dashed;
            border-width: 2px;
            text-align: center;
            font-size: 20px;
            color: #888;
            background-color: #ccc;
            min-height: 50px;
        }

        .mwindowlb {
            float: left;
            margin-top: 5px;
        }

        .mwindowname {
        }

        .mwindower {
            display: block;
            margin-left: 5px;
            margin-top: 5px;
            color: red;
        }

        .progressnum {
            display: inline-block;
            float: left;
            margin-right: 5px;
            font-size: 14px;
        }
    </style>
}
<div id="zen-page">
    <div class="page-header">
        <h1>文件管理</h1>
    </div>
    <ul class="breadcrumb" data-bind="foreach: paths">
        <li>
            <!-- ko if: $index() < $parent.paths().length - 1 -->
            <a href="javascript:;"
                data-bind="text: Title, click:$parent.clickPath"></a>
            <!-- /ko -->
            <!-- ko if: $index() + 1 == $parent.paths().length -->
            <span
                data-bind="text: Title"></span>
            <!-- /ko -->
            <span data-bind="visible: $index() + 1 < $parent.paths().length" class="divider">></span>
        </li>
    </ul>
    <div style="margin-left: 30px;" data-bind="visible: dirs().length > 0">
        <div class="row">
            <ul class="thumbnails" data-bind="foreach: dirs">
                <li class="span2" data-bind="style: { marginLeft: ($index() > 0 && $index() % 6 == 0) ? '0':'' }">
                    <div class="thumbnail highlight">
                        <a href="#" data-bind="click: $parent.clickDir">
                            <img class="store-icon" data-bind="attr: { src: Icon }" />
                        </a>
                        <div class="caption" style="text-align: center;">
                            <!-- ko if:Type == 'dir' || Type == 'mkdir' -->
                            <b data-bind="text: Title, attr:{ title: Title }" class="inlinenobreak"></b>
                            <!-- /ko -->
                            <!-- ko if:Type == 'file' -->
                            <b data-bind="text: Title, attr:{ title: Title + '<br />文件大小：' + app.bytesFormat(Length) }" class="inlinenobreak"></b>
                            <!-- /ko -->
                            <div class="btn-toolbar" data-bind="visible: Type != 'mkdir'">
                                <!-- ko if:Type == 'dir' --> 
                                <div class="btn-group">
                                    <a href="#" data-bind="click: $parent.copylink" class="btn btn-small">复制链接</a>
                                @if (Context.User.IsInRole("admin"))
                                {
                                    <a href="#" class="btn btn-small" data-bind="click: $parent.del">删除</a>   
                                }
                                </div>
                                <!-- /ko -->
                                <!-- ko if:Type == 'file' -->
                                <div class="btn-group">
                                    <a href="#" data-bind="click: $parent.download" class="btn btn-small">下载</a>
                                    
                                    <a href="#" data-bind="click: $parent.copylink" class="btn btn-small">复制链接</a>

                                    @if (Context.User.IsInRole("admin"))
                                    {
                                        <a href="#" class="btn btn-small" data-bind="click: $parent.del">删除</a>
                                    }
                                </div>
                                <!-- /ko -->
                            </div>
                        </div>
                    </div>
                </li>
            </ul>
        </div>
    </div>
</div>

@if (User.IsInRole("admin") || User.IsInRole("user"))
{
    <div class="uploadpanel">
    <div id="dragView" class="uploadarea">
        <span style="display: block; margin-top: 5px; margin-bottom: 5px">拖放文件到此处上传</span>
        <div id="uploadView" style="display:none; margin-bottom:10px" data-bind="visible: files().length > 0">
            <table cellpadding="3" class="well" style="width: 100%">
                <tbody data-bind="foreach: files">
                    <tr>
                        <td data-bind="text: name" style="text-align: left; font-size: 16px;"></td>
                        <td style="width: 50%" data-bind="visible: completed() == false && failed() == false">
                            <span class="progressnum" data-bind="text: progress() + '%'"></span>
                            <div class="progress progress-striped active" style="margin-bottom: 0px;">
                                <div class="bar" data-bind="style: { width: progress() + '%' }"></div>
                            </div>
                        </td>
                        <td>
                            <span class="label label-success" data-bind="visible: completed">完成</span>
                            <span class="label label-important" data-bind="visible: failed, text: '失败：' + error()"></span></td>
                        <td>
                            <span class="close" style="float: inherit; margin-bottom: 6px; display: block" data-bind="click: $parent.remove">&times;</span></td>
                    </tr>
                </tbody>
            </table>
            <button class="btn btn-success" data-bind="click: upload">上  传</button>
        </div>
    </div>
</div>
}

@section js
{
    <script>
        var ICON_PATH = '@Url.Content("~/Content/images/store/")';
        var template_path = {
            Title: 'root',
            Dir: '/',
            Link: '/',
            Type: 'dir'
        };
        var new_dir = {
            Title: '新建文件夹',
            Dir: '/',
            Icon: '@Url.Content("~/Content/images/store/label_new_blue.ico")',
            Type: 'mkdir'
        };

        $(document.body).ready(function () {
            $('body').tooltip({
                selector: 'b',
                placement: 'bottom',
                html: true
            });
        });

        function fileViewModel() {
            var self = this;

            self.paths = ko.observableArray();
            self.dirs = ko.observableArray();
            self.currentDir = ko.observable();
            self.currentPath = ko.observable();

            self.clickPath = function (p) {
                self.currentDir(p);
                self.currentPath(p.Dir);
                app.showLoading();
                $.getJSON('/File/Dir?dirname=' + encodeURIComponent(p.Dir), null, function (data) {
                    app.hideLoading();
                    var rtn = new app.ajaxData(data);
                    if (rtn.Status == 0) {
                        self.dirs.removeAll();
                        self.paths.removeAll();
                        self.paths.push(template_path);

                        var links = parseDir2Url(p.Dir);
                        if (links) {
                            for (var i = 0; i < links.length; i++) {
                                self.paths.push(links[i]);
                            }
                        }
                        var dirs = rtn.Data;
                        if (dirs && dirs.length == 0) {
                            return;
                        }
                        var dir = dirs[0];
                        for (var i = 0; i < dirs.length; i++) {
                            self.dirs.push(dirs[i]);
                        }
                        self.dirs.push(new_dir);
                    } else {
                        app.alert(rtn.Message, '请求出错');
                    }
                });
            }

            self.refresh = function () {
                self.clickPath(self.currentDir());
            }

            self.clickDir = function (d) {
                if (d.Type === 'dir') {
                    self.clickPath({ Title: d.Title, Dir: d.Link });
                } else if (d.Type == 'mkdir') {
                    self.mkdir();
                } else if (d.Type == 'file') {
                    self.preview(d);
                }
            }

            self.preview = function (d) {
                var fe = d.FileExtension;
                if (!app.checkFilePreview(fe)) {
                    return;
                }
                var w = new app.window();
                w.setTitle('正在加载：' + d.Title);
                w.showLoading();
                w.show();
                $.getJSON('/File/Preview?dir=' + encodeURIComponent(d.Dir + "/" + d.Title), null, function (data) {
                    var rtn = new app.ajaxData(data);
                    if (data.Status == 0) {
                        var res = data.Data.source;
                        var modify = data.Data.modify;
                        w.setTitle(d.Title);

                        if (fe == ".pdf") {
                            w.setHeight('80%');
                            var height = w.getHeight() - 135;
                            var ifr = makeIframe(w.dom(), res, height);
                        } else if (fe == '.doc' || fe == '.docx') {
                            w.setHeight('80%');
                            var height = w.getHeight() - 135;
                            var ifr = makeIframe(w.dom(), res, height);
                        } else if (res.indexOf('data:image') == 0) {
                            w.setContent('<div style="text-align:center"><img src="' + res + '" /></div>');
                        } else {
                            w.setContent(res);
                        }

                        w.setFooter('<span>最后修改时间：' + modify + '</span>');
                    } else {
                        app.alert(rtn.Message, '请求出错');
                        w.hide();
                    }
                    w.hideLoading();
                });
            }

            self.copylink = function (d) {
                if (d.FileLink != undefined) {
                    showLink(d.FileLink);
                }
                app.showLoading();
                $.getJSON('/File/FileLink', { dir: d.Link, type: d.Type }, function (data) {
                    app.hideLoading();
                    var rtn = new app.ajaxData(data);
                    if (rtn.Status == 0) {
                        d.FileLink = rtn.Data;
                        showLink(d.FileLink);
                    } else {
                        app.alert(rtn.Message);
                    }
                });
            }

            self.download = function (d) {
                var link = '/File/Download?dir=' + encodeURIComponent(d.Dir + "/" + d.Title);

                var w = new app.window();
                w.setTitle('文件下载');
                w.setContent('<div style="text-align:center"><a class="btn btn-primary" href="' + link + '" target="_blank"><i class="icon-download-alt icon-white"></i> 下载 ' + d.Title + '</a></div>');
                w.show();
            }

            self.del = function (d) {
                app.dialog(function () {
                    app.showLoading();
                    $.getJSON('/File/Delete', { dir: d.Link, type: d.Type }, function (data) {
                        var rtn = new app.ajaxData(data);
                        if (rtn.Status == 0) {
                            viewModel.refresh();
                        } else {
                            app.alert(rtn.Message);
                        }
                        app.hideLoading();
                    })
                }, '确定要删除吗？此操作不可恢复。')
            }

            self.mkdir = function () {
                var w = new app.window();
                w.setTitle('新建文件夹');
                w.setContent('<div style="text-align:center; width:300px;margin:0 auto"><label class="mwindowlb" for="mwindow_mkdir_name">名称：</label><input class="mwindowname" id="mwindow_mkdir_name" type="text" /><span id="mwindow_mkdir_error"  class="mwindower" ></span></div>');
                w.setFooter('<button class="btn" data-dismiss="modal">取消</button><button class="btn btn-primary" data-loading="创建中" onclick="mkdir(mwindow_mkdir_name.value)">创建</button>');
                w.show();
            }
        }
        var viewModel = new fileViewModel();
        ko.applyBindings(viewModel, $('#zen-page')[0]);
        @if (@Model != null)
        {
        @:viewModel.clickDir({ Title: 'root', Dir: '@Model', Link: '@Model', Type: 'dir' });
        }
        else
        {
        @:viewModel.clickDir(template_path);
	    }

        function subDir(dir) {
            if (dir.length < 2) {
                return null;
            }
            var index = dir.lastIndexOf('/');
            var dirname = dir.substr(index + 1);
            return dirname;
        }
        function parseDir2Url(dir) {
            if (dir.length <= 1) {
                return null;
            }
            var links = [];
            var t_dirs = dir.split('/');
            for (var i = 0; i < t_dirs.length; i++) {
                var t_dir = t_dirs.slice(0, i).join('/');
                if (t_dir.length < 1) {
                    t_dir = t_dirs[i];
                } else {
                    t_dir = links[i - 1].Dir + "/" + t_dirs[i];
                }

                links.push({
                    Title: t_dirs[i],
                    Dir: t_dir
                });
            }
            return links;
        }

        function makeIframe(container, content, height) {
            var ifr = document.createElement("iframe");
            ifr.frameBorder = 0;
            ifr.width = '100%';
            ifr.height = height;
            ifr.marginWidth = 0;
            ifr.marginHeight = 0;
            container.appendChild(ifr);
            var ifrdoc = ifr.contentDocument;
            ifrdoc.designMode = "on"; //文档进入可编辑模式
            ifrdoc.open(); //打开流
            ifrdoc.write(content);
            ifrdoc.close(); //关闭流
            ifrdoc.designMode = "off"; //文档进入非可编辑模式
            return ifr;
        }

        function mkdir(name) {
            if (name.length == 0) {
                $('#mwindow_mkdir_error').text('请输入文件夹名称');
                return;
            }
            var path = viewModel.currentPath() != null ? viewModel.currentPath() + '/' : '';

            app.showLoading();
            $.post('/File/Mkdir', 'dir=' + encodeURIComponent(path + name), function (data) {
                app.hideLoading();
                var rtn = new app.ajaxData(data);
                if (rtn.Status == 0) {
                    $('#myWindow').modal('hide');
                    viewModel.refresh();
                } else {
                    $('#mwindow_mkdir_error').text(rtn.Message);
                }
            });
        }

        function showLink(fileLink) {
            var w = new app.window();
            w.setTitle('复制链接');
            var url = '@Html.Raw(string.Concat("http://", Request.Url.Authority, "/File/Link?id="))';
            w.setContent('<div style="text-align:center"><code>' + url + fileLink.Guid + '</code></div>');
            w.show();
        }
    </script>
    
@if (User.IsInRole("admin") || User.IsInRole("user"))
{
    <script>
        // 上传部分 文件模型
        function fileModel(name, total) {
            var self = this;
            this.state = null;
            self.name = ko.observable(name);
            self.loaded = ko.observable(0);
            self.total = ko.observable(total || 0);
            self.failed = ko.observable(false);
            self.error = ko.observable();

            self.progress = ko.computed(function () {
                return Math.round(self.loaded() / self.total() * 100);
            })
            self.completed = ko.computed(function () {
                return !self.failed() && self.total() === self.loaded();
            })
        }

        // 上传部分 视图模型
        function UploadViewModel() {
            var self = this;

            self.files = ko.observableArray();
            self.remove = function (d) {
                self.files.remove(d);
            }

            self.upload = uploadFile;
        }

        // 初始化视图模型，绑定
        var uploadViewModel = new UploadViewModel();
        ko.applyBindings(uploadViewModel, $('#uploadView')[0]);


        // 拖拽文件
        $(dragView).on('dragenter', function () {
            if (event.preventDefault) {
                event.stopPropagation();
                event.preventDefault();
            }
        });

        $(dragView).on('dragover', function () {
            if (event.preventDefault) {
                event.stopPropagation();
                event.preventDefault();
            }
        });

        $(dragView).on('drop', function () {
            if (event.preventDefault) {
                event.stopPropagation();
                event.preventDefault();
            }
            dropHandle(event);
        });

        // 获取拖拽的文件，添加到文件列表中
        function dropHandle(e) {

            var filelist = e.dataTransfer.files;

            if (filelist.length == 0) {
                return;
            };

            for (var i = 0; i < filelist.length; i++) {
                var file = filelist[i];
                var f = new fileModel(file.name, file.size);
                // 保存 File 引用
                f.state = file;
                uploadViewModel.files.push(f);
            }
        }
        
        // 上传文件
        function uploadFile(f) {
            var fs = uploadViewModel.files();
            app.showLoading('正在上传，请稍候');
            for (var i = 0; i < fs.length; i++) {

                // 上传之前将进度设为0
                fs[i].loaded(0);

                // 执行上传
                checkFileUpload(fs[i]);
            }
        }

        // 先检查文件是否存在，如果存在则询问是否覆盖
        function checkFileUpload(f) {
            var filePath = f.name();
            if (viewModel.currentPath().length > 1) {
                filePath = viewModel.currentPath() + '/' + filePath;
            }

            // 发送请求检查文件是否存在
            $.getJSON('/File/Exists', { dir: filePath }, function (data) {
                var rtn = new app.ajaxData(data);
                if (rtn.Status == 0) {
                    if (rtn.Data == 1) { // 文件存在，询问
                        app.dialog(function () {
                            // 如果选择“是”，执行上传
                            sendToServer(f);
                        }, '此文件已存在，是否覆盖？');
                    } else { // 不存在，直接上传
                        sendToServer(f);
                    }
                } else {
                    f.failed(true);
                    f.error(rtn.Message);
                }
            });
        }

        // 上传文件操作
        function sendToServer(f) {
            // 获取 File 引用
            var blob = f.state;
            // 设置 buffer 大小
            var bytes_per_chunk = 1024 * 1024;
            // 获得文件总大小
            var size = blob.size;
            f.total(size);

            var start = 0;
            var end = bytes_per_chunk;
            var chunk;

            // 将文件分段上传
            while (start < size) {
                // 任何地方出错，跳出
                if (f.failed()) {
                    break;
                }
                if (end > size) {
                    end = size;
                }
                // 切割文件
                chunk = blob.slice(start, end);
                // 分段上传
                chunkUpload(chunk, f, start);
                start = end;
                end = start + bytes_per_chunk;
            }
        }

        // 分段上传
        function chunkUpload(blob, f, uploaded) {
            var filePath = f.name();
            if (viewModel.currentPath().length > 1) {
                filePath = viewModel.currentPath() + '/' + filePath;
            }
            // 初始化 xhr 对象
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/File/Upload', true);

            // 要服务器响应的是 json 格式
            xhr.setRequestHeader('Accept', 'application/json');

            // 设置路径
            xhr.setRequestHeader('X-File-Path', encodeURIComponent(filePath));

            // 设置流的 Position，提供给服务器合并文件用
            xhr.setRequestHeader('X-File-Position', uploaded);

            // 设置文件总大小，提供给服务器合并文件用
            xhr.setRequestHeader('X-File-Size', f.state.size);

            xhr.onload = function () {
                var s = eval('(' + xhr.responseText + ')');
                var rtn = new app.ajaxData(s);
                if (rtn.Status == 0) {
                    // 完成此段上传之后更新进度
                    f.loaded(f.loaded() + blob.size);
                    if (rtn.Data == 'done') {
                        uploadViewModel.files.remove(f);
                        if (uploadViewModel.files().length == 0) {
                            app.hideLoading();
                        }
                        // 文件上传完成，刷新目录
                        viewModel.refresh();
                    }
                } else {
                    // 出错则标记错误，跳出循环，显示错误消息
                    f.failed(true);
                    f.error(rtn.Message);
                }
            }
            xhr.send(blob);
        }

    </script>
}
}